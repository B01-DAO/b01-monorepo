/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace INounsDescriptor {
  export type AttributeRangesStruct = {
    volumeCountRange: [BigNumberish, BigNumberish];
    maxVolumeHeightRange: [BigNumberish, BigNumberish];
    waterFeatureCountRange: [BigNumberish, BigNumberish];
    grassFeatureCountRange: [BigNumberish, BigNumberish];
    treeCountRange: [BigNumberish, BigNumberish];
    bushCountRange: [BigNumberish, BigNumberish];
    peopleCountRange: [BigNumberish, BigNumberish];
    timeOfDayRange: [BigNumberish, BigNumberish];
    seasonRange: [BigNumberish, BigNumberish];
    greenRooftopPRange: [BigNumberish, BigNumberish];
    siteEdgeOffsetRange: [BigNumberish, BigNumberish];
    orientationRange: [BigNumberish, BigNumberish];
  };

  export type AttributeRangesStructOutput = [
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [number, number],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & {
    volumeCountRange: [number, number];
    maxVolumeHeightRange: [number, number];
    waterFeatureCountRange: [number, number];
    grassFeatureCountRange: [number, number];
    treeCountRange: [number, number];
    bushCountRange: [number, number];
    peopleCountRange: [number, number];
    timeOfDayRange: [number, number];
    seasonRange: [number, number];
    greenRooftopPRange: [number, number];
    siteEdgeOffsetRange: [BigNumber, BigNumber];
    orientationRange: [BigNumber, BigNumber];
  };
}

export interface NounsDescriptorInterface extends utils.Interface {
  functions: {
    "arePartsLocked()": FunctionFragment;
    "getAttributeRanges()": FunctionFragment;
    "getBushCountRange()": FunctionFragment;
    "getGrassFeatureCountRange()": FunctionFragment;
    "getGreenRooftopPRange()": FunctionFragment;
    "getMaxVolumeHeightRange()": FunctionFragment;
    "getOrientationRange()": FunctionFragment;
    "getPeopleCountRange()": FunctionFragment;
    "getSeasonRange()": FunctionFragment;
    "getSiteEdgeOffsetRange()": FunctionFragment;
    "getTimeOfDayRange()": FunctionFragment;
    "getTreeCountRange()": FunctionFragment;
    "getVolumeCountRange()": FunctionFragment;
    "getWaterFeatureCountRange()": FunctionFragment;
    "lockParts()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arePartsLocked"
      | "getAttributeRanges"
      | "getBushCountRange"
      | "getGrassFeatureCountRange"
      | "getGreenRooftopPRange"
      | "getMaxVolumeHeightRange"
      | "getOrientationRange"
      | "getPeopleCountRange"
      | "getSeasonRange"
      | "getSiteEdgeOffsetRange"
      | "getTimeOfDayRange"
      | "getTreeCountRange"
      | "getVolumeCountRange"
      | "getWaterFeatureCountRange"
      | "lockParts"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arePartsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeRanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBushCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGrassFeatureCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGreenRooftopPRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVolumeHeightRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrientationRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeopleCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeasonRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSiteEdgeOffsetRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOfDayRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVolumeCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWaterFeatureCountRange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockParts", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "arePartsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBushCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrassFeatureCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGreenRooftopPRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVolumeHeightRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrientationRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeopleCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeasonRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSiteEdgeOffsetRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeOfDayRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolumeCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaterFeatureCountRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockParts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PartsLocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartsLocked"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PartsLockedEventObject {}
export type PartsLockedEvent = TypedEvent<[], PartsLockedEventObject>;

export type PartsLockedEventFilter = TypedEventFilter<PartsLockedEvent>;

export interface NounsDescriptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NounsDescriptorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arePartsLocked(overrides?: CallOverrides): Promise<[boolean]>;

    getAttributeRanges(
      overrides?: CallOverrides
    ): Promise<[INounsDescriptor.AttributeRangesStructOutput]>;

    getBushCountRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getGrassFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    getGreenRooftopPRange(
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    getMaxVolumeHeightRange(
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    getOrientationRange(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getPeopleCountRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getSeasonRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getSiteEdgeOffsetRange(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getTimeOfDayRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getTreeCountRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getVolumeCountRange(overrides?: CallOverrides): Promise<[[number, number]]>;

    getWaterFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

  getAttributeRanges(
    overrides?: CallOverrides
  ): Promise<INounsDescriptor.AttributeRangesStructOutput>;

  getBushCountRange(overrides?: CallOverrides): Promise<[number, number]>;

  getGrassFeatureCountRange(
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getGreenRooftopPRange(overrides?: CallOverrides): Promise<[number, number]>;

  getMaxVolumeHeightRange(overrides?: CallOverrides): Promise<[number, number]>;

  getOrientationRange(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getPeopleCountRange(overrides?: CallOverrides): Promise<[number, number]>;

  getSeasonRange(overrides?: CallOverrides): Promise<[number, number]>;

  getSiteEdgeOffsetRange(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTimeOfDayRange(overrides?: CallOverrides): Promise<[number, number]>;

  getTreeCountRange(overrides?: CallOverrides): Promise<[number, number]>;

  getVolumeCountRange(overrides?: CallOverrides): Promise<[number, number]>;

  getWaterFeatureCountRange(
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  lockParts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

    getAttributeRanges(
      overrides?: CallOverrides
    ): Promise<INounsDescriptor.AttributeRangesStructOutput>;

    getBushCountRange(overrides?: CallOverrides): Promise<[number, number]>;

    getGrassFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getGreenRooftopPRange(overrides?: CallOverrides): Promise<[number, number]>;

    getMaxVolumeHeightRange(
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getOrientationRange(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getPeopleCountRange(overrides?: CallOverrides): Promise<[number, number]>;

    getSeasonRange(overrides?: CallOverrides): Promise<[number, number]>;

    getSiteEdgeOffsetRange(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimeOfDayRange(overrides?: CallOverrides): Promise<[number, number]>;

    getTreeCountRange(overrides?: CallOverrides): Promise<[number, number]>;

    getVolumeCountRange(overrides?: CallOverrides): Promise<[number, number]>;

    getWaterFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    lockParts(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PartsLocked()"(): PartsLockedEventFilter;
    PartsLocked(): PartsLockedEventFilter;
  };

  estimateGas: {
    arePartsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getAttributeRanges(overrides?: CallOverrides): Promise<BigNumber>;

    getBushCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    getGrassFeatureCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    getGreenRooftopPRange(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVolumeHeightRange(overrides?: CallOverrides): Promise<BigNumber>;

    getOrientationRange(overrides?: CallOverrides): Promise<BigNumber>;

    getPeopleCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    getSeasonRange(overrides?: CallOverrides): Promise<BigNumber>;

    getSiteEdgeOffsetRange(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeOfDayRange(overrides?: CallOverrides): Promise<BigNumber>;

    getTreeCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    getVolumeCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    getWaterFeatureCountRange(overrides?: CallOverrides): Promise<BigNumber>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arePartsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttributeRanges(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBushCountRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrassFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGreenRooftopPRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVolumeHeightRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrientationRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeopleCountRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeasonRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSiteEdgeOffsetRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOfDayRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreeCountRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVolumeCountRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWaterFeatureCountRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
