/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NounsSeeder, NounsSeederInterface } from "../NounsSeeder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nounId",
        type: "uint256",
      },
      {
        internalType: "contract INounsDescriptor",
        name: "descriptor",
        type: "address",
      },
    ],
    name: "generateSeed",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "volumeCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "maxVolumeHeight",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "waterFeatureCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "grassFeatureCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "treeCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "bushCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "peopleCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "lighting",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "season",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "environment",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "greenRooftopP",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "siteEdgeOffset",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orientation",
            type: "uint256",
          },
        ],
        internalType: "struct INounsSeeder.Seed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610841806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063422e2e9914610030575b600080fd5b61004361003e3660046105c3565b610059565b604051610050919061060c565b60405180910390f35b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906100cd60014361075b565b604080519140602083015281018590526060016040516020818303038152906040528051906020012060001c905060008373ffffffffffffffffffffffffffffffffffffffff16630323f0776040518163ffffffff1660e01b81526004016103406040518083038186803b15801561014457600080fd5b505afa158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c91906104af565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101919091528151805192935090916102029185919060015b60200201516103a7565b60ff1681526020820151805161022091601086901c919060016101f8565b60ff16602082810191909152604083015180516102429286901c9160016101f8565b60ff1660408201526060820151805161026391603086901c919060016101f8565b60ff1660608201526080820151805161028491604086901c919060016101f8565b60ff16608082015260a082015180516102a591605086901c919060016101f8565b60ff1660a082015260c082015180516102c691606086901c919060016101f8565b60ff1660c082015260e082015180516102e791607086901c919060016101f8565b60ff1660e0820152610100820151805161030991608086901c919060016101f8565b60ff16610100820152610120820151805161032c91609086901c919060016101f8565b60ff16610120820152610140820151805161034f9160a086901c919060016101f8565b60ff1661014082015261016082015180516103789160b086901c919060015b60200201516103c2565b61016082015261018082015180516103989160c086901c9190600161036e565b61018082015295945050505050565b60006103ba848460ff168460ff166103c2565b949350505050565b6000826103cf818461075b565b6103da906001610743565b6103e49086610772565b6103ba9190610743565b600082601f8301126103ff57600080fd5b610407610720565b80838560408601111561041957600080fd5b60005b600281101561043b57815184526020938401939091019060010161041c565b509095945050505050565b600082601f83011261045757600080fd5b61045f610720565b80838560408601111561047157600080fd5b6000805b60028110156104a357825160ff8116811461048e578283fd5b85526020948501949290920191600101610475565b50919695505050505050565b600061034082840312156104c257600080fd5b6104ca6106f6565b6104d48484610446565b81526104e38460408501610446565b60208201526104f58460808501610446565b60408201526105078460c08501610446565b606082015261010061051b85828601610446565b608083015261014061052f86828701610446565b60a084015261018061054387828801610446565b60c0850152610556876101c08801610446565b60e0850152610569876102008801610446565b8385015261057b876102408801610446565b61012085015261058f876102808801610446565b828501526105a1876102c088016103ee565b6101608501526105b58761030088016103ee565b908401525090949350505050565b600080604083850312156105d657600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff8116811461060157600080fd5b809150509250929050565b815160ff1681526101a08101602083015161062c602084018260ff169052565b506040830151610641604084018260ff169052565b506060830151610656606084018260ff169052565b50608083015161066b608084018260ff169052565b5060a083015161068060a084018260ff169052565b5060c083015161069560c084018260ff169052565b5060e08301516106aa60e084018260ff169052565b506101008381015160ff90811691840191909152610120808501518216908401526101408085015190911690830152610160808401519083015261018092830151929091019190915290565b6040516101a0810167ffffffffffffffff8111828210171561071a5761071a6107dc565b60405290565b6040805190810167ffffffffffffffff8111828210171561071a5761071a6107dc565b60008219821115610756576107566107ad565b500190565b60008282101561076d5761076d6107ad565b500390565b6000826107a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212203dda36a9bbc8f796daaaf638d9aadf15ac0883f7932ccbf83cb7a79ef1af974464736f6c63430008060033";

type NounsSeederConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NounsSeederConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NounsSeeder__factory extends ContractFactory {
  constructor(...args: NounsSeederConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NounsSeeder";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NounsSeeder> {
    return super.deploy(overrides || {}) as Promise<NounsSeeder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NounsSeeder {
    return super.attach(address) as NounsSeeder;
  }
  connect(signer: Signer): NounsSeeder__factory {
    return super.connect(signer) as NounsSeeder__factory;
  }
  static readonly contractName: "NounsSeeder";
  public readonly contractName: "NounsSeeder";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NounsSeederInterface {
    return new utils.Interface(_abi) as NounsSeederInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NounsSeeder {
    return new Contract(address, _abi, signerOrProvider) as NounsSeeder;
  }
}
